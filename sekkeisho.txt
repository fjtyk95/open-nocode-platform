2.1 システム構成概要
mermaid
flowchart LR
    A[ユーザーPC/ブラウザ] --> |HTTPS| B[ノーコード/ローコードMVPサーバー]
    B --> C[(DB)]
    B --> D[認証基盤(SSO/LDAP)]
フロントエンド: Webブラウザ（Chrome、Edgeを想定）
アプリサーバ: MVPノーコードツールの実行環境（クラウド or オンプレ）
DB: フォーム設計・ワークフロー定義・実行データを格納するリレーショナルDB
認証基盤: 社内SSOやAD連携（MVPではユーザーテーブル管理を想定し、将来拡張でSSO対応）
2.2 データフロー(サンプル)
ユーザーが新フォーム作成
画面上でフィールド定義（テキスト、日付、数値等）を設定 → DBテーブルが自動生成
フォーム入力→承認フロー
入力データがDBに登録される
承認者に通知が飛ぶ
承認者が画面上で「承認／差戻し」→DBにステータスが更新
ダッシュボード表示
集計用クエリ／APIがDBから集計結果を取得
グラフや一覧表で可視化
2.3 データベース設計（例）
テーブル: Forms
カラム	型	説明
form_id	INT(PK)	フォームID
form_name	VARCHAR	フォーム名
version	INT	バージョン
created_by	VARCHAR	作成ユーザーID
created_at	DATETIME	作成日時
updated_at	DATETIME	更新日時
テーブル: FormFields
カラム	型	説明
field_id	INT(PK)	フィールドID
form_id	INT	対応するフォームID (FK)
field_label	VARCHAR	フィールドの日本語ラベル
field_type	VARCHAR	テキスト/数値/日付/選択肢 など
is_required	BOOLEAN	必須フラグ
order_no	INT	フィールド表示順
テーブル: WorkflowSteps
カラム	型	説明
step_id	INT(PK)	ワークフローステップID
form_id	INT	紐づくフォームID
step_order	INT	ステップ順序
approver_role	VARCHAR	承認者ロール(上席, 管理部 など)
action_type	VARCHAR	承認／差戻し／自動処理など
テーブル: Submissions
カラム	型	説明
submission_id	INT(PK)	ユーザーの提出データID
form_id	INT	どのフォームの提出か
submission_data	JSON	入力データ(JSON形式で保管)
status	VARCHAR	ワークフローの現在ステータス(承認待ち 等)
created_by	VARCHAR	提出ユーザーID
created_at	DATETIME	提出日時
updated_at	DATETIME	更新日時
2.4 UIデザイン(概要)
フォーム作成画面

左側に「入力フィールド一覧」（テキスト、数値、日付、チェックボックスなど）のパレット
中央に「フォームプレビュー」スペース → ドラッグ＆ドロップで追加
右側に「プロパティ設定」（フィールドラベル、必須フラグ、入力制限など）
ワークフロー設定画面

フローチャート表示(ステップA → B → C)
各ステップで承認者ロール・通知メールの設定
ダッシュボード

登録件数やステータス別の棒グラフ／円グラフ
期間指定や検索条件などフィルタUI
2.5 ロール・権限仕様（例）
ロール名	権限例
管理者(Admin)	・ユーザー管理、システム全設定
・すべてのフォームを閲覧・編集・削除
作成者(Creator)	・新規フォーム＆ワークフローの作成
・自分が作成したフォームの削除/更新
承認者(Approver)	・自分にアサインされた承認タスクを確認・承認/却下
・フォーム自体の修正は不可
一般ユーザー(User)	・公開されているフォームへの入力、提出
・自分の提出データの閲覧のみ
2.6 バージョン管理フロー
作成者がフォームを編集 → 新バージョン(ドラフト)が作成
テスト環境や管理者レビュー後に「公開」操作 → 公開バージョンが切り替わる
旧バージョンも参照可（但し新規データ投入は不可に設定）
通知設定：公開後、指定ユーザーに「更新通知」を送付
2.7 運用計画（MVP段階）
ユーザーサポート: FAQページや簡易チュートリアル動画の用意
データバックアップ: DBスナップショットを1日1回取得
障害対応: MVP中は平日9:00-18:00、メールサポートのみ
リリースサイクル: 2週間スプリントで小規模改善をリリース